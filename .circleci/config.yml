version: 2.1
orbs:
  slack: circleci/slack@4.1
  kubernetes: circleci/kubernetes@1.3.0
  docker: circleci/docker@2.1.2
commands:
  destroy-environment:
    description: Destroy eksctl kubernetes stack given a workflow ID.
    parameters:
      clusterName:
        type: string
    steps:
      - run:
          name: Install Dependencies
          when: on_fail
          command: |
            #Install eksctl#
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin    
      - run:
          name: Destroy Cluster
          when: on_fail
          command: |
            eksctl delete cluster --name="<< parameters.clusterName >>"            

jobs:
  build-app:
    docker:
    - image: cimg/python:3.10.5
    steps:
      - checkout
      - run:
          name: Setup and Activate Virtual Environment
          command: |
            python3 -m venv ~/.pyvenv
            source ~/.pyvenv/bin/activate
            which python
      - run:
          name: Install dependencies
          command: |
            #pip install typed-ast --upgrade
            #python3 -m pip install --upgrade pip            
            pip install --upgrade pip &&  pip install -r requirements.txt
            pip install pylint
      - run:
          name: Lint code
          command: |
            pylint --disable=R,C,W1203,W1202 app.py

  build-initial-image:
    docker:
    - image: cimg/base:2022.06
      user: root
    working_directory: /tmp/workspace    
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Update Environment Variables in Dockerfile
          command: |
            oldColor=`grep APP_COLOR Dockerfile | cut -d " " -f2`
            newColor=`grep APP_COLOR app_properties.txt`
            # Replace color from app_properties.txt in Dockerfile
            sed -i "s/$oldColor/$newColor/" Dockerfile

            oldVersion=`grep VERSION Dockerfile | cut -d " " -f2`
            newVersion=`grep APP_VERSION app_properties.txt`
            # Replace version from app_properties.txt in Dockerfile
            sed -i "s/$oldVersion/$newVersion/" Dockerfile
      - run:
          name: Install dependencies
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint         
      - run:
          name: Lint Dockerfile
          command: |
            hadolint Dockerfile            
      - run:
          name: Build & Push Docker Image
          command: |
            cat Dockerfile

            tagPrefix=`grep TAG app_properties.txt | cut -d "=" -f2`
            version=`grep APP_VERSION app_properties.txt | cut -d "=" -f2`
            imagePath=`echo "${tagPrefix}:${version}"`
            echo $imagePath > imagePath.txt
            docker build -t $imagePath .   
            docker images
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker image push $imagePath
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - imagePath.txt

  create-kubernetes-cluster:
    docker:
    - image: amazon/aws-cli
    working_directory: /tmp/workspace
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            #Install eksctl#
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - run:
          name: Retrieve Previous Cluster Name
          command: |
            echo $(aws eks list-clusters --query "clusters[0]" --output text) > oldClusterName.txt
            cat oldClusterName.txt
      - run:
          name: Create New Kubernetes Cluster
          command: |
            eksctl create cluster --name="capstone-${CIRCLE_WORKFLOW_ID:0:7}" --node-type t2.small --nodes 2 --nodes-min 1 --nodes-max 3 --managed
      - destroy-environment:
          clusterName: capstone-${CIRCLE_WORKFLOW_ID:0:7}        
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - oldClusterName.txt

  deploy-app-to-cluster:
    docker:
    - image: amazon/aws-cli
    working_directory: /tmp/workspace
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            #Install eksctl if destroy environment is called#
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - attach_workspace:
          at: /tmp/workspace            
      - run:
          name: Deploy App
          command: |
            aws eks update-kubeconfig --name "capstone-${CIRCLE_WORKFLOW_ID:0:7}"
            export KUBECONFIG=/root/.kube/config
            pwd
            ls -l
            imagePath=`cat imagePath.txt`
            echo "IMAGE Path: $imagePath"
            #Create Deployment with Image pushed to DockerHub before #
            kubectl create deployment mycolor --image $imagePath --replicas 2
            kubectl rollout status deployment/mycolor
            kubectl describe deployment mycolor
            echo "Deploying LB Service"
            kubectl expose deployment mycolor --name lbservice --type LoadBalancer --port 8080
            #Sleep 6 minutes to allow instances to come up
            sleep 360
      - destroy-environment:
          clusterName: capstone-${CIRCLE_WORKFLOW_ID:0:7}

  smoke-tests:
    docker:
    - image: amazon/aws-cli
    working_directory: /tmp/workspace
    steps:
      - checkout
      - kubernetes/install-kubectl      
      - run:
          name: Install dependencies
          command: |
            yum -y install curl tar gzip
      - run:
          name: Test for Color
          command: |
            #EXTRACT HOSTNAME OF LOAD BALANCER FROM AWS#
            #LB_NAME=`aws elb describe-load-balancers --query "LoadBalancerDescriptions[0].LoadBalancerName" --output text`
            #echo "LB Name: ${LB_Name}"
            #BACKEND_IP=`aws ec2 describe-network-interfaces --filters Name=description,Values="ELB ${LB_NAME}" --query 'NetworkInterfaces[*].PrivateIpAddresses[*].Association.PublicIp' --output text | head -1`
            aws eks update-kubeconfig --name "capstone-${CIRCLE_WORKFLOW_ID:0:7}"
            export KUBECONFIG=/root/.kube/config
            BACKEND_IP=`kubectl get svc lbservice -o jsonpath='{.status.loadBalancer.ingress[*].hostname}'`
            echo "BACKEND IP: ${BACKEND_IP}"
            BACKEND_URL_COLOR=`echo "http://${BACKEND_IP}:8080/color"`
            echo "BACKEND URL: ${BACKEND_URL_COLOR}"
            colorFromApp=`curl ${BACKEND_URL_COLOR}`
            echo "COLOR FROM APP: ${colorFromApp}"
            colorFromProperties=`grep APP_COLOR app_properties.txt | cut -d "=" -f2`
            echo "COLOR FROM PROPERTIES: ${colorFromProperties}"
            if [ ${colorFromApp} == ${colorFromProperties} ]
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Test for Version
          command: |
            #LB_NAME=`aws elb describe-load-balancers --query "LoadBalancerDescriptions[0].LoadBalancerName" --output text`
            #echo "LB NAME: ${LB_NAME}"
            #BACKEND_IP=`aws ec2 describe-network-interfaces --filters Name=description,Values="ELB ${LB_NAME}" --query 'NetworkInterfaces[*].PrivateIpAddresses[*].Association.PublicIp' --output text | head -1`
            aws eks update-kubeconfig --name "capstone-${CIRCLE_WORKFLOW_ID:0:7}"
            export KUBECONFIG=/root/.kube/config
            BACKEND_IP=`kubectl get svc lbservice -o jsonpath='{.status.loadBalancer.ingress[*].hostname}'`
            echo "BACKEND IP: ${BACKEND_IP}"
            BACKEND_URL_VERSION=`echo "http://${BACKEND_IP}:8080/version"`
            echo $BACKEND_URL_VERSION
            versionFromApp=`curl ${BACKEND_URL_VERSION}`
            versionFromProperties=`grep APP_VERSION app_properties.txt | cut -d "=" -f2`
            echo "VERSION FROM APP: ${versionFromApp}"
            echo "VERSION FROM PROPERTIES: ${versionFromProperties}"
            if [ ${versionFromApp} == ${versionFromProperties} ]
            then
                exit 0
            else
                exit 1
            fi
      - destroy-environment:
          clusterName: capstone-${CIRCLE_WORKFLOW_ID:0:7}            

  rolling-deployment:
    docker:
    - image: cimg/base:2022.06
      user: root
    working_directory: /tmp/workspace
    steps:
      - checkout
      - setup_remote_docker
      - kubernetes/install-kubectl
      - run:
          name: Install dependencies
          command: |
            apt-get install tar gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            #Install eksctl if destroy environment is called#
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin      
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Update APP2 Environment Variables in Dockerfile
          command: |
            oldColor=`grep APP_COLOR Dockerfile | cut -d " " -f2`
            newColor=`grep APP2_COLOR app_properties.txt`
            # Replace color from app_properties.txt in Dockerfile
            sed -i "s/$oldColor/$newColor/" Dockerfile

            oldVersion=`grep VERSION Dockerfile | cut -d " " -f2`
            newVersion=`grep APP2_VERSION app_properties.txt | cut -d "=" -f2`
            # Replace version from app_properties.txt in Dockerfile
            sed -i "s/$oldVersion/VERSION=$newVersion/" Dockerfile

            #REPLACE APP2 with APP
            sed -i 's/APP2_/APP_/g' Dockerfile
      - run:
          name: Build & Push APP2 Docker Image
          command: |
            cat Dockerfile
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            tagPrefix=`grep TAG app_properties.txt | cut -d "=" -f2`
            version=`grep APP2_VERSION app_properties.txt | cut -d "=" -f2`
            imagePath=`echo "${tagPrefix}:${version}"`
            echo $imagePath > imagePath.txt
            docker build -t $imagePath .   
            docker images
            docker image push $imagePath
      - run:
          name: Deploy APP2
          command: |
            aws eks update-kubeconfig --name "capstone-${CIRCLE_WORKFLOW_ID:0:7}"
            export KUBECONFIG=/root/.kube/config
            imagePath=`cat imagePath.txt`
            #Update Deployment Image - Rolling Update Strategy by Default#            
            kubectl set image deployment mycolor webapp-color=$imagePath
            kubectl rollout status deployment/mycolor
            sleep 120
            loadBalancerHost=`kubectl get svc lbservice -o jsonpath='{.status.loadBalancer.ingress[*].hostname}'`
            echo "Color of the web app changed to : `curl http://${loadBalancerHost}:8080/color`"
            echo "Version of the web app changed to : `curl http://${loadBalancerHost}:8080/version`"
      - destroy-environment:
          clusterName: capstone-${CIRCLE_WORKFLOW_ID:0:7}            

  cleanup:
    docker:
    - image: cimg/base:2022.06
    working_directory: /tmp/workspace
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            #Install eksctl#
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - attach_workspace:
          at: /tmp/workspace            
      - run:
          name: Delete Old Cluster
          command: |            
            oldClusterName=`cat oldClusterName.txt`
            if [ $oldClusterName != 'None']
            then
              eksctl delete cluster --name=$oldClusterName
            else
              echo "No old clusters found"
            fi

workflows:
  default:
    jobs:
      - build-app
      - build-initial-image:
         requires: [build-app]
      - create-kubernetes-cluster:
          requires: [build-initial-image]
      - deploy-app-to-cluster:
          requires: [create-kubernetes-cluster]
      - smoke-tests:
          requires: [deploy-app-to-cluster]
      - rolling-deployment:
          requires: [smoke-tests]
      - cleanup:
          requires: [rolling-deployment]
